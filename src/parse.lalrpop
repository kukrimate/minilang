use crate::ast::*;
use crate::util::*;
use num_bigint::BigInt;
use std::str::FromStr;

grammar();

PriExpr: Expr = {
  "nil" => Expr::Nil,
  "true" => Expr::Bool(true),
  "false" => Expr::Bool(false),
  Int => Expr::Int(<>),
  Str => Expr::Str(<>),
  Id => Expr::Id(<>),
  "(" <expr:Expr> ")" => expr
}

UnExpr: Expr = {
  PriExpr,
  "-" <arg:UnExpr> => {
    Expr::Un(UnOp::Neg, Box::new(arg))
  },
  "!" <arg:UnExpr> => {
    Expr::Un(UnOp::Not, Box::new(arg))
  }
}

PostExpr: Expr = {
  UnExpr,
  <func:PostExpr> "(" <args:Comma<Expr>> ")" => {
    Expr::Call(Box::new(func), args)
  },
  <obj:PostExpr> "." <id:Id> => {
    Expr::Dot(Box::new(obj), id)
  }
}

MulExpr: Expr = {
  PostExpr,
  <lhs:MulExpr> "*" <rhs:PostExpr> => {
    Expr::Bin(BinOp::Mul, Box::new(lhs), Box::new(rhs))
  },
  <lhs:MulExpr> "/" <rhs:PostExpr> => {
    Expr::Bin(BinOp::Div, Box::new(lhs), Box::new(rhs))
  },
  <lhs:MulExpr> "%" <rhs:PostExpr> => {
    Expr::Bin(BinOp::Mod, Box::new(lhs), Box::new(rhs))
  }
}

AddExpr: Expr = {
  MulExpr,
  <lhs:AddExpr> "+" <rhs:MulExpr> => {
    Expr::Bin(BinOp::Add, Box::new(lhs), Box::new(rhs))
  },
  <lhs:AddExpr> "-" <rhs:MulExpr> => {
    Expr::Bin(BinOp::Sub, Box::new(lhs), Box::new(rhs))
  }
}

EqExpr: Expr = {
  AddExpr,
  <lhs:AddExpr> "==" <rhs:AddExpr> => {
    Expr::Bin(BinOp::Eq, Box::new(lhs), Box::new(rhs))
  },
  <lhs:AddExpr> "!=" <rhs:AddExpr> => {
    Expr::Bin(BinOp::Ne, Box::new(lhs), Box::new(rhs))
  },
  <lhs:AddExpr> "<" <rhs:AddExpr> => {
    Expr::Bin(BinOp::Lt, Box::new(lhs), Box::new(rhs))
  },
  <lhs:AddExpr> ">" <rhs:AddExpr> => {
    Expr::Bin(BinOp::Gt, Box::new(lhs), Box::new(rhs))
  },
  <lhs:AddExpr> "<=" <rhs:AddExpr> => {
    Expr::Bin(BinOp::Le, Box::new(lhs), Box::new(rhs))
  },
  <lhs:AddExpr> ">=" <rhs:AddExpr> => {
    Expr::Bin(BinOp::Ge, Box::new(lhs), Box::new(rhs))
  }
}

AndExpr: Expr = {
  EqExpr,
  <lhs:AndExpr> "&&" <rhs:EqExpr> => {
    Expr::And(Box::new(lhs), Box::new(rhs))
  }
}

OrExpr: Expr = {
  AndExpr,
  <lhs:OrExpr> "||" <rhs:AndExpr> => {
    Expr::Or(Box::new(lhs), Box::new(rhs))
  }
}

ExprWithoutBlock: Expr = {
  OrExpr,
  "var" <id:Id> => {
    Expr::Var(id, Box::new(Expr::Nil))
  },
  "var" <id:Id> "=" <val:OrExpr> => {
    Expr::Var(id, Box::new(val))
  },
  <id:Id> "=" <val:OrExpr> => {
    Expr::As(id, Box::new(val))
  },
  "continue" => {
    Expr::Continue
  },
  "break" => {
    Expr::Break
  },
  "return" <val:OrExpr?> => {
    Expr::Return(Box::new(val.unwrap_or(Expr::Nil)))
  }
}

ExprSeqItem: Expr = {
  ExprWithBlock,
  <expr:ExprWithoutBlock> ";" => expr
}

ExprSeq: Vec<Expr> = {
  ExprSeqItem*,
  <mut body:ExprSeqItem*> <last:ExprWithoutBlock> => {
    body.push(last);
    body
  }
}

Block: Expr = "{" <exprs:ExprSeq> "}" => Expr::Block(exprs);

IfExpr: Expr = {
  "if" <cond:Expr> <body1:Block> => {
    Expr::If(Box::new(cond), Box::new(body1), Box::new(Expr::Nil))
  },
  "if" <cond:Expr> <body1:Block> "else" <body2:Block> => {
    Expr::If(Box::new(cond), Box::new(body1), Box::new(body2))
  },
  "if" <cond:Expr> <body1:Block> "else" <body2:IfExpr> => {
    Expr::If(Box::new(cond), Box::new(body1), Box::new(body2))
  }
}

FuncDef: FuncDef = {
  "func" <id:Id> "(" <params:Comma<Id>> ")" <body:Block> => {
    (id, params, Box::new(body))
  }
}

ExprWithBlock: Expr = {
  Block,
  IfExpr,
  "while" <cond:Expr> <body:Block> => {
    Expr::While(Box::new(cond), Box::new(body))
  },
  "for" <id:Id> "in" <iter:Expr> <body:Block> => {
    Expr::For(id, Box::new(iter), Box::new(body))
  },
  FuncDef => {
    Expr::Func(<>)
  },
  "type" <id:Id> "(" <fields:Comma<Id>> ")" "{" <methods:FuncDef*> "}" => {
    Expr::Type(id, fields, methods)
  }
}

Expr: Expr = {
  ExprWithoutBlock,
  ExprWithBlock
}

pub Program: Program = ExprSeq => Program(<>);

// Tokens

Int: BigInt = r"[0-9]+" => BigInt::from_str(<>).unwrap();
Str: String = r#""([^"]|\\")*""# => parse_str_lit(<>).unwrap();
Id: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => str::to_owned(<>);

match {
  // Skip whitespace
  r"\s*" => {},
  // Skip `// comments`
  r"//[^\n\r]*[\n\r]*" => {},
  // Skip `/* comments */`
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // Other regexes
  _
}

// Macros

Comma<T>: Vec<T> = {
  <mut v:(<T> ",")*> <e:T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
}
